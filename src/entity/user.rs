//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use super::sea_orm_active_enums::LockingStatus;
use super::sea_orm_active_enums::UserRole;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "User")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTimeUtc,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTimeUtc,
    #[sea_orm(column_type = "Text")]
    pub username: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub nickname: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub bio: Option<String>,
    pub role: UserRole,
    pub permissions: i32,
    #[sea_orm(column_type = "Text")]
    pub email: String,
    #[sea_orm(column_name = "hashedPassword", column_type = "Text", nullable)]
    pub hashed_password: Option<String>,
    #[sea_orm(column_name = "avatarUrl", column_type = "Text", nullable)]
    pub avatar_url: Option<String>,
    #[sea_orm(column_name = "avatarSourceId", column_type = "Text", nullable)]
    pub avatar_source_id: Option<String>,
    #[sea_orm(column_name = "bannerExt", column_type = "Text")]
    pub banner_ext: String,
    #[sea_orm(column_type = "Custom(\"array\".to_owned())", nullable)]
    pub badges: Option<String>,
    #[sea_orm(column_name = "lockStatus")]
    pub lock_status: LockingStatus,
    #[sea_orm(
        column_name = "premiumFeatures",
        column_type = "Custom(\"array\".to_owned())",
        nullable
    )]
    pub premium_features: Option<String>,
    #[sea_orm(
        column_name = "userFavouriteIds",
        column_type = "Custom(\"array\".to_owned())",
        nullable
    )]
    pub user_favourite_ids: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::group::Entity")]
    Group,
    #[sea_orm(has_many = "super::group_member::Entity")]
    GroupMember,
    #[sea_orm(has_many = "super::session::Entity")]
    Session,
    #[sea_orm(has_many = "super::token::Entity")]
    Token,
    #[sea_orm(has_many = "super::image::Entity")]
    Image,
    #[sea_orm(has_many = "super::album::Entity")]
    Album,
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::moderator_notifications::Entity")]
    ModeratorNotifications,
    #[sea_orm(has_many = "super::user_connection::Entity")]
    UserConnection,
}

impl Related<super::group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Group.def()
    }
}

impl Related<super::group_member::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GroupMember.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Session.def()
    }
}

impl Related<super::token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Token.def()
    }
}

impl Related<super::image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Image.def()
    }
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Album.def()
    }
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::moderator_notifications::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ModeratorNotifications.def()
    }
}

impl Related<super::user_connection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserConnection.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
